# Copyright 2020 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------
version: '3.6'

volumes:
  contracts-shared:
  registry:
  gridd-cargill:

services:

# ---== shared services ==---

  pike-contract-builder:
    image: pike-contract-builder
    container_name: pike-contract-builder
    build:
      context: ../..
      dockerfile: contracts/pike/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/grid-pike*.scar /usr/share/scar
      "

  product-contract-builder:
    image: product-contract-builder
    container_name: product-contract-builder
    build:
      context: ../..
      dockerfile: contracts/product/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/grid-product*.scar /usr/share/scar
      "

  schema-contract-builder:
    image: schema-contract-builder
    container_name: schema-contract-builder
    build:
      context: ../..
      dockerfile: contracts/schema/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/grid-schema*.scar /usr/share/scar
      "

  tnt-contract-builder:
    image: tnt-contract-builder
    container_name: tnt-contract-builder
    build:
      context: ../..
      dockerfile: contracts/track_and_trace/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/grid-track-and-trace*.scar /usr/share/scar
      "

  location-contract-builder:
    image: location-contract-builder
    container_name: location-contract-builder
    build:
      context: ../..
      dockerfile: contracts/location/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/grid-location*.scar /usr/share/scar
      "

  generate-registry:
    image: splintercommunity/splinter-cli:0.4
    volumes:
      - registry:/registry
    command: |
      bash -c "
        if [ ! -f /registry/registry.yaml ]
        then
          # generate keys
          splinter admin keygen cargill -d /registry
          # check if splinterd-cargill is available
          while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-cargill:8085/status) -ne 200 ]] ; do
             >&2 echo \"splinterd is unavailable - sleeping\"
             sleep 1
          done
          # build the registry
          splinter registry build \
            http://splinterd-cargill:8085 \
            --file /registry/registry.yaml \
            --key-file /registry/cargill.pub \
            --metadata organization='Cargill'
        fi
      "

  registry-server:
    image: httpd:2.4
    container_name: registry-server
    restart: always
    expose:
      - 80
    ports:
        - "8099:80"
    volumes:
      - registry:/usr/local/apache2/htdocs

# ---== cargill node ==---

  db-cargill:
    image: postgres
    container_name: db-cargill
    hostname: db-cargill
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: grid
      POSTGRES_PASSWORD: grid_example
      POSTGRES_DB: grid

  gridd-cargill:
    image: gridd
    container_name: gridd-cargill
    hostname: gridd-cargill
    build:
      context: ../..
      dockerfile: daemon/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
        - CARGO_ARGS=-- --features experimental
    volumes:
      - contracts-shared:/usr/share/scar
      - gridd-cargill:/etc/grid/keys
    expose:
      - 8080
    ports:
      - "8080:8080"
    environment:
      GRID_DAEMON_KEY: "cargill-agent"
      GRID_DAEMON_ENDPOINT: "http://gridd-cargill:8080"
    entrypoint: |
        bash -c "
          # we need to wait for the db to have started.
          until PGPASSWORD=grid_example psql -h db-cargill -U grid -c '\q' > /dev/null 2>&1; do
              >&2 echo \"Database is unavailable - sleeping\"
              sleep 1
          done
          grid -vv admin keygen --skip && \
          grid -vv database migrate \
              --database-url postgres://grid:grid_example@db-cargill/grid &&
          gridd -vv -b 0.0.0.0:8080 -C splinter:http://splinterd-cargill:8085 \
              --database-url postgres://grid:grid_example@db-cargill/grid
        "

  scabbard-cli-cargill:
    image: splintercommunity/scabbard-cli:0.4
    container_name: scabbard-cli-cargill
    hostname: scabbard-cli-cargill
    volumes:
      - gridd-cargill:/root/.splinter/keys

  splinterd-cargill:
    image: splintercommunity/splinterd:0.4
    container_name: splinterd-cargill
    hostname: splinterd-cargill
    expose:
      - 8044
      - 8085
    ports:
      - "8044:8044"
      - "8085:8085"
    volumes:
      - contracts-shared:/usr/share/scar
      - registry:/registry
    entrypoint: |
      bash -c "
        until PGPASSWORD=admin psql -h splinter-db-cargill -U admin -d splinter -c '\q'; do
          >&2 echo \"Database is unavailable - sleeping\"
          sleep 1
        done
        if [ ! -f /etc/splinter/certs/private/server.key ]
        then
          splinter-cli cert generate --force
        fi && \
        splinter database migrate -C postgres://admin:admin@splinter-db-cargill:5432/splinter && \
        splinterd -vv \
        --registries http://registry-server:80/registry.yaml \
        --rest-api-endpoint 0.0.0.0:8085 \
        --network-endpoints tcps://0.0.0.0:8044 \
        --advertised-endpoint tcps://splinterd-cargill:8044 \
        --node-id cargill-node-000 \
        --service-endpoint tcp://0.0.0.0:8043 \
        --storage yaml \
        --tls-client-cert /etc/splinter/certs/client.crt \
        --tls-client-key /etc/splinter/certs/private/client.key \
        --tls-server-cert /etc/splinter/certs/server.crt \
        --tls-server-key /etc/splinter/certs/private/server.key \
        --enable-biome \
        --database postgres://admin:admin@splinter-db-cargill:5432/splinter \
        --tls-insecure
      "

  splinter-db-cargill:
    image: postgres
    container_name: splinter-db-cargill
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: splinter

  grid-ui-cargill:
    build:
      context: ../../grid-ui
      args:
        REPO_VERSION: ${REPO_VERSION}
        REACT_APP_SPLINTER_URL: '/splinterd'
        REACT_APP_SAPLING_URL: '/sapling-dev-server'
        REACT_APP_GRID_URL: '/gridd'
        SPLINTER_URL: 'http://splinterd-cargill:8085'
        SAPLING_URL: ' http://sapling-dev-server-cargill:80'
        GRID_URL: 'http://gridd-cargill:8080'
    image: grid-ui-cargill
    container_name: grid-ui-cargill
    expose:
      - 80
    ports:
      - '3030:80'

  sapling-dev-server-cargill:
    build:
      context: ../..
      dockerfile: grid-ui/sapling-dev-server/Dockerfile
    container_name: sapling-dev-server-cargill
    expose:
      - 80

